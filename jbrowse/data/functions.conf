curieUrl = function(track,f) {
    var curie = f.get('curie');
    return '/gene/'+curie; }

geneColor = function(feature) {
    var type = feature.get('type');
    var biotype = feature.get('so_term_name');
    if (!(typeof biotype === 'undefined') && biotype != 'protein_coding_gene') {return 'gray';}
    if (typeof type === 'undefined') {
        return 'gray';
    }
    if (type.match(/exon/)) {return 'gray';}
    if (type.match(/pseudo/)) {return 'gray';}
    if (type.match(/miRNA/)) {return 'gray';}
    if (typeof biotype === 'undefined') {
        var parent = feature._parent;
        var parenttype = parent.get('so_term_name');
        if (!(typeof parenttype === 'undefined') && biotype != 'protein_coding_gene') {return 'gray';}
    }
    if (type.match(/exon/)) {return 'gray';}
    if (type.match(/pseudo/)) {return 'gray';}
    if (type.match(/miRNA/)) {return 'gray';}
    var strand = feature.get('strand');
    if (strand == -1) {return 'teal';}
    if (strand ==  1) {return 'darkviolet';}
    return 'gray'; }

geneHeight = function(f) {
    var type = f.get('type');
    if (type == 'CDS') {return 10;}
    return 6;
    }

exonColor = function(f) {
    var strand = f.get('strand');
    if (strand == -1) {return 'turquoise';}
    if (strand ==  1) {return 'violet';}
    return 'gray';
    }

geneGlyph = function(f) {
    var biotype = f.get('so_term_name');
    if (!(f.children())) {console.log('returning with no children');return 'JBrowse/View/FeatureGlyph/Box';}
    var type = f.get('type');
    console.log(biotype);
    if (type.match(/_gene/))    {return 'wormbase-glyphs/View/FeatureGlyph/NoncodingTranscript';}
    if (typeof biotype === 'undefined') {return 'wormbase-glyphs/View/FeatureGlyph/WBGene';}
    if (biotype=='tRNA_gene')  {return 'wormbase-glyphs/View/FeatureGlyph/TRNAGene';}
    if (biotype=='snoRNA_gene'){return 'wormbase-glyphs/View/FeatureGlyph/SnoRNAGene';}
    if (biotype=='snRNA_gene') {return 'wormbase-glyphs/View/FeatureGlyph/SnRNAGene';}
    if (biotype=='scRNA_gene') {return 'wormbase-glyphs/View/FeatureGlyph/ScRNAGene';}
    if (biotype=='rRNA_gene')  {return 'wormbase-glyphs/View/FeatureGlyph/RRNAGene';}
    if (biotype=='piRNA_gene') {return 'wormbase-glyphs/View/FeatureGlyph/PiRNAGene';}
    if (biotype=='miRNA_gene') {return 'wormbase-glyphs/View/FeatureGlyph/MiRNAGene';}
    if (biotype=='lincRNA_gene'){return 'wormbase-glyphs/View/FeatureGlyph/LincRNAGene';}
    if (biotype.match(/lncRNA/)){return 'wormbase-glyphs/View/FeatureGlyph/NoncodingGene';}
    if (biotype=='ncRNA_gene') {return 'wormbase-glyphs/View/FeatureGlyph/NcRNAGene';}
    if (biotype=='pseudogene') {return 'wormbase-glyphs/View/FeatureGlyph/PseudoGene';}
    if (biotype=='protein_coding_gene') {return 'wormbase-glyphs/View/FeatureGlyph/WBGene';}
    if (biotype=='gene') {return 'wormbase-glyphs/View/FeatureGlyph/WBGene';}
    return 'wormbase-glyphs/View/FeatureGlyph/NoncodingGene'; }

geneLinkLabel = function(track,f) {
    var type = f.get('type');
    var patt = /RNA|transcript/;
    if (patt.test(type)) {return f.get('Name');}
    var aliases = f.get('Alias');
    var locus;
    if (Array.isArray(aliases)) {locus = aliases[0];  }
        else {locus = aliases;}
    var name = f.get('sequence_name');
    if (locus == name) {return name; }
    if (typeof locus === 'undefined') {return name;}
    return locus+' ('+name+')';  }

geneLabel = function(f) {
    var type = f.get('type');
    var name = f.get('Name');
    var patt = /RNA$|transcript$/;
    if (patt.test(type)) {
        var transid = f.get('transcript_id');
        if (Array.isArray(transid)) {
            transid = transid.values[0];
        }
        if (name == transid) {return name;}
        if (typeof name !== 'undefined') { return name;}
        if (typeof transid === 'undefined') {
            var id = f.get('ID');
            return id;
        }
        return name ; 
    }
    return name;
    /*
    var aliases = f.get('Alias');
    var locus;
    if (Array.isArray(aliases)) {locus = aliases[0];  }
        else {locus = aliases;}
    var name = f.get('sequence_name');
    if (locus == name) {return name; }
    if (typeof locus === 'undefined') {return name;}
    if (name == 'undefined' || typeof name === 'undefined' ) {return locus;}
    return locus+' ('+name+')';
    */
    }

translateIUPAC(n) {
    if (n == 'A' || n == 'C' || n == 'T' || n == 'G' || n == 'N') {
        return n;
    }
    if (n == 'R') {
        return 'A or G';
    }
    return n;
}

variantsBalloon = function(f) {
    var f = this.feature;
    var br='</br>';
    var symbol= f.get('allele_symbols');
    symbol  = symbol.values[0];
    var notes = '<b>Symbol: </b>' + symbol + br;
    var genes = f.get('allele_of_gene_symbols');
    var geneImpacts = f.get('geneImpact');
    var geneList = '';
    if (typeof genes !== 'undefined') {
        geneList = '<b>Affected gene(s):</b> ' + genes.values[0] + ' (' +geneImpacts.values[0] +')';
        for (var i = 1; i < genes.values.length; i++) {
            geneList = geneList + ',' +br+'&nbsp;&nbsp;' + genes.values[i] + ' (' +geneImpacts.values[i] +')';
        }
        notes = notes + geneList + br;
    }
    var type = f.get('soTerm');
    type = type.values[0];
    if (type == 'point_mutation') {
        type = 'SNV';
    }
    notes = notes + '<b>Type: </b>' + type +br;
    var name = f.get('name');
    var seqid = f.get('seq_id');
    var start = f.get('start') + 1;
    var end   = f.get('end');
    var ref_allele = f.get('reference_allele');
    var alt_allele = f.get('alternative_alleles');
    alt_allele = alt_allele.values[0];
    var length;
    if (type == 'SNV') {
        length = "1bp";
        if (alt_allele == '<R>') {
            alt_allele = 'A or G';
        }
        else if (alt_allele == '<Y>') {
            alt_allele = 'C or T';
        }
        else if (alt_allele == '<S>') {
            alt_allele = 'C or G';
        }
        else if (alt_allele == '<W>') {
            alt_allele = 'A or T';
        }
        else if (alt_allele == '<M>') {
            alt_allele = 'A or C';
        }
        else if (alt_allele == '<K>') {
            alt_allele = 'G or T';
        }
        else if (alt_allele == '<B>') {
            alt_allele = 'C, G, or T';
        }
        else if (alt_allele == '<D>') {
            alt_allele = 'A, G or T';
        }
        else if (alt_allele == '<H>') {
            alt_allele = 'A, C or T';
        }
        else if (alt_allele == '<H>') {
            alt_allele = 'A, C or G';
        }
    }
    else if (type == 'insertion') {
        if (alt_allele.match(/\./)) {length = 'unknown length inserted';}
        else { length = alt_allele.length -1 + "bp inserted"; }
    }
    else if (type == 'deletion') {
        length = ref_allele.length -1 +"bp deleted";
    }
    else if (type == 'MNV') {
        length = ref_allele.length +"bp";
    }
    else if (type == 'delins') {
        var del = ref_allele.length -1 + "bp deleted";
        var ins;
        if (alt_allele.match(/\./)) {
            ins = "unknown length inserted";
        }
        else {
            ins = alt_allele.length -1 + "bp inserted";
        }
        length = del + '; '+ins;
    }
    /*remove the pad base*/
    if (type =='insertion' ||type == 'delins') {
        if (alt_allele.match(/\./)) {
            alt_allele = alt_allele.substring(0,1).toLowerCase()+'N+';
        }
        else {
            /*alt_allele = alt_allele.substring(1); */
        }
    }
    if (type == 'deletion' ||type == 'delins') {
        /*ref_allele = ref_allele.substring(1); */
    }
    if (ref_allele.length > 20) {
        ref_allele = ref_allele.substring(0,1).toLowerCase()+ref_allele.substring(1,8).toUpperCase()+ '...' +ref_allele.substring(ref_allele.length-8).toUpperCase();
    }
    else {
        ref_allele = ref_allele.substring(0,1).toLowerCase()+ref_allele.substring(1).toUpperCase();
    }
    if (alt_allele.length > 20) {
        alt_allele = alt_allele.substring(0,1).toLowerCase()+alt_allele.substring(1,8).toUpperCase()+'...'+alt_allele.substring(alt_allele.length-8).toUpperCase();
    }
    else {
        if (alt_allele.indexOf(' or ')<0 && alt_allele.indexOf('+') < 0) {
            alt_allele = alt_allele.substring(0,1).toLowerCase()+alt_allele.substring(1).toUpperCase();
        }
        else {
            /* do nothing--this is handled elsewhere */
        }
    }
  /* possible change for dealing with unknown insertions
    alt_allele = alt_allele.replace('.', 'N+');
  */
  /*
    notes = notes + '<b>Sequence change: </b>'+ ref_allele + '->' + alt_allele   + br;
  */
    if (type == 'SNV' || type == 'MNV') {
        if (alt_allele.indexOf(' or ')<0 && alt_allele.indexOf('+') < 0) {
            alt_allele = alt_allele.toUpperCase();
        }
        ref_allele = ref_allele.toUpperCase();
    }
    var change;
    if (type == 'insertion') {
        change = 'ins: '+ref_allele+'->'+alt_allele;
    }
    else if (type == 'deletion') {
        change = 'del: '+ref_allele + (alt_allele ? '->'+alt_allele.toLowerCase() : '');
    }
    else {
        change = ref_allele + '->' + alt_allele;
    }
    notes = notes + '<b>Sequence change: </b>'+ change +br;
    notes = notes + '<b>Length: </b>' + length + br;
    var hgvs  = f.get('hgvs_nomenclature');
    var hgvs  = hgvs.values[0];
    notes = notes + '<b>HGVS name: </b>' + hgvs + br;
    var transcripts = f.get('allele_of_transcript_gff3_names');
    if (typeof transcripts !== 'undefined') {
        notes = notes + '<b>Predicted effects:</b>' +br;
        var transcriptLevelConsequence = f.get('transcriptLevelConsequence');
        for (var i = 0; i < transcripts.values.length; i++ ) {
            notes = notes + '<b>&nbsp;&nbsp;' + transcripts.values[i] + ': </b>' + transcriptLevelConsequence.values[i].replace(/\|/g,', ') + br;
        }
    }
    return notes + 'no references or additional alleles yet' + '<hr/>Click feature to make this window persistent';
    }

variationLabel = function(f) {
    /*var f = this.feature;*/
    var symbol= f.get('allele_symbols');
    symbol  = symbol.values[0];
    if (! (typeof symbol === 'undefined') ) {
        var temp = symbol.replace('<sup>', '<').replace('</sup>','>');
        return temp;
    }
    var name = f.get('name');
    if (! (typeof name === 'undefined') ) {
        var temp = name.replace('<sup>', '<').replace('</sup>','>');
        return temp;
    }
    return;
    }

variationDescription = function(f) {
    var type = f.get('soTerm');
    type = type.values[0];
    if (type == 'point_mutation') {
        type = 'SNV';
    }
    var ref_allele = f.get('reference_allele');
    var alt_allele = f.get('alternative_alleles');
    alt_allele = alt_allele.values[0];
    if (alt_allele == '<R>') {
        alt_allele = 'A or G';
    }
    else if (alt_allele == '<Y>') {
        alt_allele = 'C or T';
    }
    else if (alt_allele == '<S>') {
        alt_allele = 'C or G';
    }
    else if (alt_allele == '<W>') {
        alt_allele = 'A or T';
    }
    else if (alt_allele == '<M>') {
        alt_allele = 'A or C';
    }
    else if (alt_allele == '<K>') {
        alt_allele = 'G or T';
    }
    else if (alt_allele == '<B>') {
        alt_allele = 'C, G, or T';
    }
    else if (alt_allele == '<D>') {
        alt_allele = 'A, G or T';
    }
    else if (alt_allele == '<H>') {
        alt_allele = 'A, C or T';
    }
    else if (alt_allele == '<H>') {
        alt_allele = 'A, C or G';
    }
    if (alt_allele.substring(alt_allele.length-1) == '.') {
        alt_allele = alt_allele.substring(0,1).toLowerCase()+ 'N+';
    }
    if (ref_allele.length > 20) {
        ref_allele = ref_allele.substring(0,1).toLowerCase()+ref_allele.substring(1,7).toUpperCase()+ '...' +ref_allele.substring(ref_allele.length-7).toUpperCase();
    }
    else if (type == 'delins' || type == 'insertion' || type == 'deletion') {
        ref_allele = ref_allele.substring(0,1).toLowerCase()+ref_allele.substring(1).toUpperCase();
    }
    if (alt_allele.length > 20) {
        alt_allele = alt_allele.substring(0,1).toLowerCase()+alt_allele.substring(1,7).toUpperCase()+ '...' +alt_allele.substring(alt_allele.length-7).toUpperCase();
    }
    else if ((type == 'delins' || type == 'insertion' || type == 'deletion') && alt_allele.indexOf('+')<0) {
        alt_allele = alt_allele.substring(0,1).toLowerCase()+alt_allele.substring(1).toUpperCase();
    }
    return type+' '+ref_allele+' -> '+alt_allele;
    }

variationCurieUrl = function(track,f) {
    var curie = f.get('allele_of_genes');
    curie     = curie.values[0];
    return '/gene/'+curie;  }

variationGlyph = function(f) {
    var type = f.get('soTerm');
    type     = type.values[0];
    if (type.match(/insertion/i))      { return 'wormbase-glyphs/View/FeatureGlyph/DownTriangle';}
    if (type =='SNV')                  { return 'wormbase-glyphs/View/FeatureGlyph/Diamond'; }
    if (type =='SNP')                  { return 'wormbase-glyphs/View/FeatureGlyph/Diamond'; }
    if (type =='point_mutation')       { return 'wormbase-glyphs/View/FeatureGlyph/Diamond'; }
    return 'JBrowse/View/FeatureGlyph/Box';
    }

simpleVariationGlyph = function(f) {
    var type = f.get('Type');
    /* type     = type.values[0]; */
    if (type.match(/insertion/i))      { return 'wormbase-glyphs/View/FeatureGlyph/DownTriangle';}
    if (type =='SNV')                  { return 'wormbase-glyphs/View/FeatureGlyph/Diamond'; }
    if (type =='SNP')                  { return 'wormbase-glyphs/View/FeatureGlyph/Diamond'; }
    if (type =='point_mutation')       { return 'wormbase-glyphs/View/FeatureGlyph/Diamond'; }
    if (type =='deletion')             { return 'JBrowse/View/FeatureGlyph/Box';}
    if (type =='MNV')                  { return 'JBrowse/View/FeatureGlyph/Box';}
    if (type =='substitution')         { return 'JBrowse/View/FeatureGlyph/Box';}
    return 'wormbase-glyphs/View/FeatureGlyph/UpTriangle';
    }

htpVariationColor = function(f) {
    var color = 'black';
    var csq = f.get('CSQ');
    if (typeof csq ==='undefined' ) {
        return color;
    }
    var cons = [];
    for (var i=0; i < csq.values.length; i++) {
        var list = csq.values[i].split('|');
        cons.push(list[2]);
    }
    for (var i=0; i < cons.length; i++) {
        if (cons[i].match('HIGH'))         {return 'red';}
    }
    for (var i=0; i < cons.length; i++) {
        if (cons[i].match('MODIFIER'))     {return 'purple';}
    }
    for (var i=0; i < cons.length; i++) {
        if (cons[i].match('MODERATE'))     {return 'gold';}
    }
    return 'cyan';
    }

variationColor = function(f) {
    var color = 'black';
    var cons = f.get('geneImpact');
    if (typeof cons === 'undefined' ) {
        return color;
    }
    for (var i=0; i < cons.values.length; i++) {
        if      (cons.values[i].match('HIGH'))     {return 'red';}
    }
    for (var i=0; i < cons.values.length; i++) {
        if      (cons.values[i].match('MODIFIER'))     {return 'purple';}
    }
    for (var i=0; i < cons.values.length; i++) {
        if      (cons.values[i].match('MODERATE'))     {return 'gold';}
    }
    return 'cyan';
    }

htpVariantsBalloon = function(f) {
    var f = this.feature;
    var br='</br>';
    var notes ;
    type = f.get('Type');
    notes = '<b>Type: </b>' + type +br;
    var seqid = f.get('seq_id');
    var start = f.get('start') + 1;
    var end   = f.get('end');
    var ref_allele = f.get('reference_allele');
    var alt_allele = f.get('alternative_alleles');
    alt_allele = alt_allele.values[0];
    var length;
    if (type == 'SNV') {
        length = "1bp";
        if (alt_allele == '<R>') {
            alt_allele = 'A or G';
        }
        else if (alt_allele == '<Y>') {
            alt_allele = 'C or T';
        }
        else if (alt_allele == '<S>') {
            alt_allele = 'C or G';
        }
        else if (alt_allele == '<W>') {
            alt_allele = 'A or T';
        }
        else if (alt_allele == '<M>') {
            alt_allele = 'A or C';
        }
        else if (alt_allele == '<K>') {
            alt_allele = 'G or T';
        }
        else if (alt_allele == '<B>') {
            alt_allele = 'C, G, or T';
        }
        else if (alt_allele == '<D>') {
            alt_allele = 'A, G or T';
        }
        else if (alt_allele == '<H>') {
            alt_allele = 'A, C or T';
        }
        else if (alt_allele == '<H>') {
            alt_allele = 'A, C or G';
        }
    }
    else if (type == 'insertion') {
        if (alt_allele.match(/\./)) {length = 'unknown length inserted';}
        else { length = alt_allele.length -1 + "bp inserted"; }
    }
    else if (type == 'deletion') {
        length = ref_allele.length -1 +"bp deleted";
    }
    else if (type == 'MNV') {
        length = ref_allele.length +"bp";
    }
    else if (type == 'delins' || type == 'substitution') {
        var del = ref_allele.length -1 + "bp deleted";
        var ins;
        if (alt_allele.match(/\./)) {
            ins = "unknown length inserted";
        }
        else {
            ins = alt_allele.length -1 + "bp inserted";
        }
        length = del + '; '+ins;
    }
    /*remove the pad base*/
    if (type =='insertion' ||type == 'delins' ||type == 'substitution') {
        if (alt_allele.match(/\./)) {
            alt_allele = alt_allele.substring(0,1).toLowerCase()+'N+';
        }
        else {
            /*alt_allele = alt_allele.substring(1); */
        }
    }
    if (type == 'deletion' ||type == 'delins') {
        /*ref_allele = ref_allele.substring(1); */
    }
    if (ref_allele.length > 20) {
        ref_allele = ref_allele.substring(0,1).toLowerCase()+ref_allele.substring(1,8).toUpperCase()+ '...' +ref_allele.substring(ref_allele.length-8).toUpperCase();
    }
    else {
        ref_allele = ref_allele.substring(0,1).toLowerCase()+ref_allele.substring(1).toUpperCase();
    }
    if (alt_allele.length > 20) {
        alt_allele = alt_allele.substring(0,1).toLowerCase()+alt_allele.substring(1,8).toUpperCase()+'...'+alt_allele.substring(alt_allele.length-8).toUpperCase();
    }
    else {
        if (alt_allele.indexOf(' or ')<0 && alt_allele.indexOf('+') < 0) {
            alt_allele = alt_allele.substring(0,1).toLowerCase()+alt_allele.substring(1).toUpperCase();
        }
        else {
            /* do nothing--this is handled elsewhere */
        }
    }
  /* possible change for dealing with unknown insertions
    alt_allele = alt_allele.replace('.', 'N+');
  */
  /*
    notes = notes + '<b>Sequence change: </b>'+ ref_allele + '->' + alt_allele   + br;
  */
    if (type == 'SNV' || type == 'MNV') {
        if (alt_allele.indexOf(' or ')<0 && alt_allele.indexOf('+') < 0) {
            alt_allele = alt_allele.toUpperCase();
        }
        ref_allele = ref_allele.toUpperCase();
    }
    var change;
    if (type == 'insertion') {
        change = 'ins: '+ref_allele+'->'+alt_allele;
    }
    else if (type == 'deletion') {
        change = 'del: '+ref_allele + (alt_allele ? '->'+alt_allele.toLowerCase() : '');
    }
    else {
        change = ref_allele + '->' + alt_allele;
    }
    notes = notes + '<b>Sequence change: </b>'+ change +br;
    notes = notes + '<b>Length: </b>' + length + br;
    /* extract out predited effect from CSQ */
    var csq = f.get('CSQ');
    var cons = [];
    for (var i=0; i < csq.values.length; i++) {
        var list = csq.values[i].split('|');
        cons.push(list[1]);
    }
    var cons_string = '<b>Predicted effect(s):</b> '+cons[0] + br;
    for (var i=1; i<cons.length; i++) {
        cons_string = cons_string + '&nbsp;&nbsp' + cons[i] +br;
    }
    notes = notes + cons_string;
    return notes + 'no references or additional alleles yet'  + '<hr/>Click feature to make this window persistent' +br+ 'or right click to see all details';
    }
